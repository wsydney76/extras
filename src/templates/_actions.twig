{% set baseUrl = baseUrl ?? parseEnv('$PRIMARY_SITE_URL') %}

<template id="actions-data"
          data-baseurl="{{ baseUrl }}"
          data-action-trigger="{{ craft.app.config.general.actionTrigger }}"
          data-csrf-token="{{ craft.app.request.csrfToken }}">
</template>

<div id="notices-wrapper" class="notices-wrapper"></div>

{% js %}

const actionData = document.getElementById('actions-data').dataset

window.Actions = {};

window.Actions.postAction = function(action, data = {}, callback = null, params = {}) {
    const {
        timeout = 20000,
        handleFailuresInCallback = false,
        logLevel = 'none',
        indicatorSelector = null,
        indicatorClass = 'fetch-request'
    } = params;

    const abortController = new AbortController();
    let timeoutId;
    if (timeout > 0) {
        timeoutId = setTimeout(
            () => abortController.abort(),
            timeout
        );
    }

    const indicator = indicatorSelector ? document.querySelector(indicatorSelector) : null;
    if (indicator) {
        indicator.classList.add(indicatorClass);
    }

    fetch(actionData.baseurl + '/' + actionData.actionTrigger + '/' + action, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'X-Csrf-Token': actionData.csrfToken
        },
        body: JSON.stringify(data),
        signal: abortController.signal
    })

        .then((response) => {
            if (logLevel === 'info') {
                console.log('Response: ', response);
            }

            if (timeout > 0) {
                clearTimeout(timeoutId);
            }

            if (indicator) {
                indicator.classList.remove(indicatorClass);
            }

            return response.json()
                .then((json) => ({
                    status: response.status,
                    ok: response.ok,
                    json
                }));
        })

        .then(({status, json, ok}) => {

            if (logLevel === 'info') {
                console.log(status, json);
            }

            const message = json.message;

            switch (status) {
                case 200:
                    if (callback) {
                        callback(json, status, ok);
                    } else {
                        Actions.notice({type: 'success', text: message})
                    }
                    break;

                case 400:
                    if (handleFailuresInCallback) {
                        if (callback) {
                            callback(json, status, ok);
                        }
                        break;
                    }

                    throw new Error(message, {cause: 'Failure'})

                case 403:
                    throw new Error('403 - Forbidden. Not logged in or insufficient permissions.', {cause: 'Failure'})

                default:
                    throw new Error(status + ' - ' + (message || 'Unspecified Error'));
            }
        })

        .catch(function(error) {
            if (logLevel === 'info' || logLevel === 'error') {
                console.log('Catch: ', error);
            }

            if (indicator) {
                indicator.classList.remove(indicatorClass);
            }

            let errorText = error.message;

            if (error.name === 'AbortError' || error.name === 'TimeoutError') {
                errorText = 'Request timed out.';
            } else if (error.name === 'TypeError' && error.message === 'Failed to fetch') {
                errorText = 'Could not connect to server.'
            }

            Actions.notice({type: 'error', text: errorText})
        });
}

window.Actions.errorsToString = function(errors, includeAttributeNames = false) {
    let errorMessage = '';
    for (const field in errors) {
        const messages = errors[field];
        errorMessage += (includeAttributeNames ? `${field.charAt(0).toUpperCase() + field.slice(1)}: ` : '') + messages.join(' ') + ' ';
    }
    return errorMessage;
}

window.Actions.notice = function(data) {
    window.dispatchEvent(new CustomEvent('actions.notice', {detail: data}));
}

window.Actions.success = function(message) {
    window.Actions.notice({type: 'success', text: message})
}

window.Actions.error = function(message) {
    window.Actions.notice({type: 'error', text: message})
}

class NoticesHandler {
    constructor() {
        this.notices = [];
        this.visible = [];
        this.noticeWrapper = document.getElementById('notices-wrapper');
        this.duration = 4000;
        window.addEventListener('actions.notice', (event) => this.add(event.detail));
    }

    add(notice) {
        notice.id = Date.now();
        this.notices.push(notice);
        this.fire(notice.id);
    }

    fire(id) {
        const notice = this.notices.find(notice => notice.id === id);
        if (notice) {
            this.visible.push(notice);
            this.render();

            const timeShown = this.duration * this.visible.length;
            setTimeout(() => {
                this.remove(id);
            }, timeShown);
        }
    }

    remove(id) {
        const index = this.visible.findIndex(notice => notice.id === id);
        if (index > -1) {
            this.visible.splice(index, 1);
            this.render();
        }
    }

    render() {
        this.noticeWrapper.innerHTML = '';

        this.visible.forEach(notice => {
            const noticeDiv = document.createElement('div');
            noticeDiv.classList.add('notices-item');

            noticeDiv.textContent = notice.text;

            noticeDiv.classList.add(notice.type === 'error' ? 'notice-error' : 'notice-success');

            noticeDiv.setAttribute('role', 'alert');
            noticeDiv.setAttribute('aria-live', 'assertive');

            noticeDiv.addEventListener('click', () => this.remove(notice.id));

            this.noticeWrapper.appendChild(noticeDiv);

            // stack on top, better if notices are placed at the bottom
            // this.noticeWrapper.insertBefore(noticeDiv, this.noticeWrapper.firstChild);

        });
    }
}

const noticesHandler = new NoticesHandler();
{% endjs %}

{% css %}
.notices-wrapper {
    pointer-events: none;
    position: fixed;
    inset: 0;
    z-index: 9999;
    display: flex;
    height: 100vh;
    width: 100vw;
    flex-direction: column;
    align-items: center; /* self-start, self-end for left/right */
    justify-content: flex-start; /* flex-end for bottom */
}


.notices-item {
    pointer-events: auto;
    cursor: pointer;
    z-index: 9999;
    margin: 0.5rem;
    display: flex;
    width: 24rem;
    align-items: center;
    justify-content: center;
    border-radius: 0.5rem;
    padding: 0.5rem 2rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    box-shadow: 4px 4px 16px -6px rgba(0, 0, 0, 0.5);
}


.notice-success {
    background-color: #16a34a; /* green-600 */
    color: white;
}

.notice-error {
    background-color: #dc2626; /* red-600 */
    color: white;
}

{% endcss %}